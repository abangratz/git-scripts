#!/usr/bin/env ruby
require 'ostruct'
require 'optparse'

module MyGit
  def self.open(working_dir)
    Base.new(working_dir)
  end
  class Base
    attr_accessor :git_dir, :lib

    def initialize(working_dir)
      @git_dir = working_dir
      @lib = Lib.new(self)
    end

    def current_branch
      @lib.branch_current
    end

    def branches
      Branches.new(self)
    end
  end
  class Lib
    def initialize(base)
      @base = base
    end

    def command(cmd, opts=[], &block)
      opts = [opts].flatten.join(' ')
      git_cmd = "git #{cmd} #{opts}"
      if block_given?
        IO.popen(git_cmd, &block)
      else
        `#{git_cmd}`.chomp
      end
    end

    def command_lines(cmd, opts=[])
      command(cmd, opts).split("\n")
    end

    def branches_all
      command_lines('branch' ).map do |b|
        current = b =~ /\A\* /
        [b.gsub('* ', '').strip, current]
      end
    end

    def branches_merged
      command_lines('branch', %w[--merged]).map do |b|
        b.gsub('* ', '').strip
      end
    end

    def branch_delete(branch, force=false)
      delete_opt = force ? '-D' : '-d'
      command('branch', [delete_opt, branch])
    end

    def branch_current
      branches_all.detect {|b| b[1]}
    end
  end
  class Branch
    attr_accessor :merged, :selected, :current

    def initialize(base, name, current=false, merged=false)
      @full = name
      @base = base
      @name = name
      @gcommit = nil
      @stashes = nil
      @merged = merged
      @selected = false
      @current = current
    end

    def merged?
      @merged
    end

    def selected?
      @selected
    end

    def current?
      @current
    end

    def to_s
      @name
    end

  end
  class Branches
    include Enumerable

    def each(&block)
      @branches.values.each(&block)
    end

    def [](name)
      @branches[name]
    end

    def initialize(base)
      @branches = {}
      @base = base
      merged = @base.lib.branches_merged
      @base.lib.branches_all.each do |b|
        @branches[b[0]] = MyGit::Branch.new(@base, b[0], b[1], merged.include?(b[0]))
      end
    end
  end
end

class BranchInteraction

  attr_reader :branches, :git

  def initialize
    @selected = []
    @working_dir = Dir.pwd
    @git = MyGit.open(@working_dir)
    load_branches
  end

  def merged_branches
    @branches.reject{ |b| b.to_s == 'master' || !b.merged? }
  end

  def select_branch(name)
    name.gsub!(/ \(\*\)\Z/, '')
    branch = @branches.detect {|b| b.to_s == name }
    branch.selected = ! branch.selected
  end

  def delete_selected
    @branches.select(&:selected?).map {|b|
      @git.lib.branch_delete(b)
    }
  end

  def delete_branch_by_index(idx)
    branchname = merged_branches[idx].to_s
    branch = @branches[branchname]
    @git.lib.branch_delete(branch)
    load_branches
  end

  def delete_merged
    merged_branches.map { |b|
      @git.lib.branch_delete(b)
    }
    load_branches
  end

  def current_branch
    @branches.detect { |b| b.current? }
  end

  def current_is_master
    self.current_branch.to_s == 'master'
  end

  def load_branches
    @branches = @git.branches.dup
  end
end


if $0 == __FILE__
  options = OpenStruct.new(interactive: true)
  OptionParser.new do |opts|
    opts.banner = 'USAGE: git interactive-branches [--delete-merged]'
    opts.separator ''
    opts.separator "Options:"
    opts.separator ''
    opts.on('-d', '--delete-merged', 'Delete merged local branches without interaction') {
      options.interactive = false
    }
    opts.on_tail('-h', '--help', 'This.') {
      puts opts
      exit
    }
  end.parse!

  runner = BranchInteraction.new
  unless runner.current_is_master
    puts "ERROR: Current checked out branch is '#{runner.current_branch}'\n\n"
    puts 'Please check out master branch in order to proceed.'
    puts
    exit 3
  end
  if runner.merged_branches.empty?
    puts "ERROR: No merged branches found, exiting\n\n"
    exit 2
  end
  if options.interactive
    loop do
      puts ' Merged branches: '
      puts
      runner.merged_branches.each_with_index do |b, i|
        puts "#{i}.  #{b}"
      end
      puts
      puts "   [A]ll"
      puts "   [Q]uit"
      puts
      print "Delete which branch? "
      x = gets
      break if x =~ /q/i
      if x =~/\Aa(ll)?/i
        runner.delete_merged
      else
        if runner.merged_branches[x.to_i]
          runner.delete_branch_by_index(x.to_i)
        else
          puts "Please select an existing branch number or Q to quit."
          puts
        end
      end
      if runner.merged_branches.empty?
        puts "All merged branches deleted. Exiting."
        break
      end
    end
  else
    runner.delete_merged
  end
end


